type Category @aws_iam @aws_api_key {
  id: ID!
  name: String!
  tournament: Tournament
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Tournament @aws_iam @aws_api_key {
  id: ID!
  name: String!
  categoryId: ID!
  category: Category
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelCategoryConnection @aws_api_key @aws_iam {
  items: [Category]!
  nextToken: String
}

input ModelCategoryFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelCategoryFilterInput]
  or: [ModelCategoryFilterInput]
  not: ModelCategoryFilterInput
}

type Query {
  getCategory(id: ID!): Category @aws_api_key @aws_iam
  listCategories(id: ID, filter: ModelCategoryFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelCategoryConnection @aws_api_key @aws_iam
  getTournament(id: ID!): Tournament @aws_api_key @aws_iam
  listTournaments(id: ID, filter: ModelTournamentFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelTournamentConnection @aws_api_key @aws_iam
}

input ModelCategoryConditionInput {
  name: ModelStringInput
  and: [ModelCategoryConditionInput]
  or: [ModelCategoryConditionInput]
  not: ModelCategoryConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateCategoryInput {
  id: ID
  name: String!
}

input UpdateCategoryInput {
  id: ID!
  name: String
}

input DeleteCategoryInput {
  id: ID!
}

type Mutation {
  createCategory(input: CreateCategoryInput!, condition: ModelCategoryConditionInput): Category @aws_api_key @aws_iam
  updateCategory(input: UpdateCategoryInput!, condition: ModelCategoryConditionInput): Category @aws_api_key @aws_iam
  deleteCategory(input: DeleteCategoryInput!, condition: ModelCategoryConditionInput): Category @aws_api_key @aws_iam
  createTournament(input: CreateTournamentInput!, condition: ModelTournamentConditionInput): Tournament @aws_api_key @aws_iam
  updateTournament(input: UpdateTournamentInput!, condition: ModelTournamentConditionInput): Tournament @aws_api_key @aws_iam
  deleteTournament(input: DeleteTournamentInput!, condition: ModelTournamentConditionInput): Tournament @aws_api_key @aws_iam
}

input ModelSubscriptionCategoryFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionCategoryFilterInput]
  or: [ModelSubscriptionCategoryFilterInput]
}

type Subscription {
  onCreateCategory(filter: ModelSubscriptionCategoryFilterInput): Category @aws_subscribe(mutations: ["createCategory"]) @aws_api_key @aws_iam
  onUpdateCategory(filter: ModelSubscriptionCategoryFilterInput): Category @aws_subscribe(mutations: ["updateCategory"]) @aws_api_key @aws_iam
  onDeleteCategory(filter: ModelSubscriptionCategoryFilterInput): Category @aws_subscribe(mutations: ["deleteCategory"]) @aws_api_key @aws_iam
  onCreateTournament(filter: ModelSubscriptionTournamentFilterInput): Tournament @aws_subscribe(mutations: ["createTournament"]) @aws_api_key @aws_iam
  onUpdateTournament(filter: ModelSubscriptionTournamentFilterInput): Tournament @aws_subscribe(mutations: ["updateTournament"]) @aws_api_key @aws_iam
  onDeleteTournament(filter: ModelSubscriptionTournamentFilterInput): Tournament @aws_subscribe(mutations: ["deleteTournament"]) @aws_api_key @aws_iam
}

type ModelTournamentConnection @aws_api_key @aws_iam {
  items: [Tournament]!
  nextToken: String
}

input ModelTournamentFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  categoryId: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelTournamentFilterInput]
  or: [ModelTournamentFilterInput]
  not: ModelTournamentFilterInput
}

input ModelTournamentConditionInput {
  name: ModelStringInput
  categoryId: ModelIDInput
  and: [ModelTournamentConditionInput]
  or: [ModelTournamentConditionInput]
  not: ModelTournamentConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateTournamentInput {
  id: ID
  name: String!
  categoryId: ID!
}

input UpdateTournamentInput {
  id: ID!
  name: String
  categoryId: ID
}

input DeleteTournamentInput {
  id: ID!
}

input ModelSubscriptionTournamentFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  categoryId: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionTournamentFilterInput]
  or: [ModelSubscriptionTournamentFilterInput]
}
