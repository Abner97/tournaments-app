type Category @aws_iam @aws_api_key {
  alias: String!
  description: String!
  tournament(filter: ModelTournamentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelTournamentConnection
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Tournament @aws_iam @aws_api_key {
  name: String!
  categoryId: ID!
  userId: ID!
  category: Category
  user: User
  tickets(filter: ModelTicketFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelTicketConnection
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Ticket @aws_iam @aws_api_key {
  status: String!
  createdAt: AWSDateTime!
  tournamentId: ID!
  userId: ID!
  tournament: Tournament
  qrcode: Qrcode
  user: User
  id: ID!
  updatedAt: AWSDateTime!
}

type Qrcode @aws_iam @aws_api_key {
  ticketId: ID!
  ticket: Ticket
  url: String!
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type User @aws_iam @aws_cognito_user_pools {
  name: String!
  profileOwner: String
  email: String!
  tierId: ID
  tier: Tier
  tickets(filter: ModelTicketFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelTicketConnection
  tournaments(filter: ModelTournamentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelTournamentConnection
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Tier @aws_iam @aws_api_key {
  user(filter: ModelUserFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelUserConnection
  alias: String!
  value: Float!
  description: String!
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelCategoryConnection @aws_api_key @aws_iam {
  items: [Category]!
  nextToken: String
}

input ModelCategoryFilterInput {
  alias: ModelStringInput
  description: ModelStringInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelCategoryFilterInput]
  or: [ModelCategoryFilterInput]
  not: ModelCategoryFilterInput
}

type Query {
  getCategory(id: ID!): Category @aws_api_key @aws_iam
  listCategories(filter: ModelCategoryFilterInput, limit: Int, nextToken: String): ModelCategoryConnection @aws_api_key @aws_iam
  getTournament(id: ID!): Tournament @aws_api_key @aws_iam
  listTournaments(filter: ModelTournamentFilterInput, limit: Int, nextToken: String): ModelTournamentConnection @aws_api_key @aws_iam
  getTicket(id: ID!): Ticket @aws_api_key @aws_iam
  listTickets(filter: ModelTicketFilterInput, limit: Int, nextToken: String): ModelTicketConnection @aws_api_key @aws_iam
  getQrcode(id: ID!): Qrcode @aws_api_key @aws_iam
  listQrcodes(filter: ModelQrcodeFilterInput, limit: Int, nextToken: String): ModelQrcodeConnection @aws_api_key @aws_iam
  getUser(id: ID!): User @aws_iam @aws_cognito_user_pools
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection @aws_iam @aws_cognito_user_pools
  getTier(id: ID!): Tier @aws_api_key @aws_iam
  listTiers(filter: ModelTierFilterInput, limit: Int, nextToken: String): ModelTierConnection @aws_api_key @aws_iam
}

input ModelCategoryConditionInput {
  alias: ModelStringInput
  description: ModelStringInput
  and: [ModelCategoryConditionInput]
  or: [ModelCategoryConditionInput]
  not: ModelCategoryConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateCategoryInput {
  alias: String!
  description: String!
  id: ID
}

input UpdateCategoryInput {
  alias: String
  description: String
  id: ID!
}

input DeleteCategoryInput {
  id: ID!
}

type Mutation {
  createCategory(input: CreateCategoryInput!, condition: ModelCategoryConditionInput): Category @aws_api_key @aws_iam
  updateCategory(input: UpdateCategoryInput!, condition: ModelCategoryConditionInput): Category @aws_api_key @aws_iam
  deleteCategory(input: DeleteCategoryInput!, condition: ModelCategoryConditionInput): Category @aws_api_key @aws_iam
  createTournament(input: CreateTournamentInput!, condition: ModelTournamentConditionInput): Tournament @aws_api_key @aws_iam
  updateTournament(input: UpdateTournamentInput!, condition: ModelTournamentConditionInput): Tournament @aws_api_key @aws_iam
  deleteTournament(input: DeleteTournamentInput!, condition: ModelTournamentConditionInput): Tournament @aws_api_key @aws_iam
  createTicket(input: CreateTicketInput!, condition: ModelTicketConditionInput): Ticket @aws_api_key @aws_iam
  updateTicket(input: UpdateTicketInput!, condition: ModelTicketConditionInput): Ticket @aws_api_key @aws_iam
  deleteTicket(input: DeleteTicketInput!, condition: ModelTicketConditionInput): Ticket @aws_api_key @aws_iam
  createQrcode(input: CreateQrcodeInput!, condition: ModelQrcodeConditionInput): Qrcode @aws_api_key @aws_iam
  updateQrcode(input: UpdateQrcodeInput!, condition: ModelQrcodeConditionInput): Qrcode @aws_api_key @aws_iam
  deleteQrcode(input: DeleteQrcodeInput!, condition: ModelQrcodeConditionInput): Qrcode @aws_api_key @aws_iam
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User @aws_iam @aws_cognito_user_pools
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User @aws_iam @aws_cognito_user_pools
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User @aws_iam @aws_cognito_user_pools
  createTier(input: CreateTierInput!, condition: ModelTierConditionInput): Tier @aws_api_key @aws_iam
  updateTier(input: UpdateTierInput!, condition: ModelTierConditionInput): Tier @aws_api_key @aws_iam
  deleteTier(input: DeleteTierInput!, condition: ModelTierConditionInput): Tier @aws_api_key @aws_iam
}

input ModelSubscriptionCategoryFilterInput {
  alias: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionCategoryFilterInput]
  or: [ModelSubscriptionCategoryFilterInput]
}

type Subscription {
  onCreateCategory(filter: ModelSubscriptionCategoryFilterInput): Category @aws_subscribe(mutations: ["createCategory"]) @aws_api_key @aws_iam
  onUpdateCategory(filter: ModelSubscriptionCategoryFilterInput): Category @aws_subscribe(mutations: ["updateCategory"]) @aws_api_key @aws_iam
  onDeleteCategory(filter: ModelSubscriptionCategoryFilterInput): Category @aws_subscribe(mutations: ["deleteCategory"]) @aws_api_key @aws_iam
  onCreateTournament(filter: ModelSubscriptionTournamentFilterInput): Tournament @aws_subscribe(mutations: ["createTournament"]) @aws_api_key @aws_iam
  onUpdateTournament(filter: ModelSubscriptionTournamentFilterInput): Tournament @aws_subscribe(mutations: ["updateTournament"]) @aws_api_key @aws_iam
  onDeleteTournament(filter: ModelSubscriptionTournamentFilterInput): Tournament @aws_subscribe(mutations: ["deleteTournament"]) @aws_api_key @aws_iam
  onCreateTicket(filter: ModelSubscriptionTicketFilterInput): Ticket @aws_subscribe(mutations: ["createTicket"]) @aws_api_key @aws_iam
  onUpdateTicket(filter: ModelSubscriptionTicketFilterInput): Ticket @aws_subscribe(mutations: ["updateTicket"]) @aws_api_key @aws_iam
  onDeleteTicket(filter: ModelSubscriptionTicketFilterInput): Ticket @aws_subscribe(mutations: ["deleteTicket"]) @aws_api_key @aws_iam
  onCreateQrcode(filter: ModelSubscriptionQrcodeFilterInput): Qrcode @aws_subscribe(mutations: ["createQrcode"]) @aws_api_key @aws_iam
  onUpdateQrcode(filter: ModelSubscriptionQrcodeFilterInput): Qrcode @aws_subscribe(mutations: ["updateQrcode"]) @aws_api_key @aws_iam
  onDeleteQrcode(filter: ModelSubscriptionQrcodeFilterInput): Qrcode @aws_subscribe(mutations: ["deleteQrcode"]) @aws_api_key @aws_iam
  onCreateUser(filter: ModelSubscriptionUserFilterInput, profileOwner: String): User @aws_subscribe(mutations: ["createUser"]) @aws_iam @aws_cognito_user_pools
  onUpdateUser(filter: ModelSubscriptionUserFilterInput, profileOwner: String): User @aws_subscribe(mutations: ["updateUser"]) @aws_iam @aws_cognito_user_pools
  onDeleteUser(filter: ModelSubscriptionUserFilterInput, profileOwner: String): User @aws_subscribe(mutations: ["deleteUser"]) @aws_iam @aws_cognito_user_pools
  onCreateTier(filter: ModelSubscriptionTierFilterInput): Tier @aws_subscribe(mutations: ["createTier"]) @aws_api_key @aws_iam
  onUpdateTier(filter: ModelSubscriptionTierFilterInput): Tier @aws_subscribe(mutations: ["updateTier"]) @aws_api_key @aws_iam
  onDeleteTier(filter: ModelSubscriptionTierFilterInput): Tier @aws_subscribe(mutations: ["deleteTier"]) @aws_api_key @aws_iam
}

type ModelTournamentConnection @aws_iam @aws_api_key @aws_cognito_user_pools {
  items: [Tournament]!
  nextToken: String
}

input ModelTournamentFilterInput {
  name: ModelStringInput
  categoryId: ModelIDInput
  userId: ModelIDInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelTournamentFilterInput]
  or: [ModelTournamentFilterInput]
  not: ModelTournamentFilterInput
}

input ModelTournamentConditionInput {
  name: ModelStringInput
  categoryId: ModelIDInput
  userId: ModelIDInput
  and: [ModelTournamentConditionInput]
  or: [ModelTournamentConditionInput]
  not: ModelTournamentConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateTournamentInput {
  name: String!
  categoryId: ID!
  userId: ID!
  id: ID
}

input UpdateTournamentInput {
  name: String
  categoryId: ID
  userId: ID
  id: ID!
}

input DeleteTournamentInput {
  id: ID!
}

input ModelSubscriptionTournamentFilterInput {
  name: ModelSubscriptionStringInput
  categoryId: ModelSubscriptionIDInput
  userId: ModelSubscriptionIDInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionTournamentFilterInput]
  or: [ModelSubscriptionTournamentFilterInput]
}

type ModelTicketConnection @aws_iam @aws_api_key @aws_cognito_user_pools {
  items: [Ticket]!
  nextToken: String
}

input ModelTicketFilterInput {
  status: ModelStringInput
  createdAt: ModelStringInput
  tournamentId: ModelIDInput
  userId: ModelIDInput
  id: ModelIDInput
  updatedAt: ModelStringInput
  and: [ModelTicketFilterInput]
  or: [ModelTicketFilterInput]
  not: ModelTicketFilterInput
}

input ModelTicketConditionInput {
  status: ModelStringInput
  createdAt: ModelStringInput
  tournamentId: ModelIDInput
  userId: ModelIDInput
  and: [ModelTicketConditionInput]
  or: [ModelTicketConditionInput]
  not: ModelTicketConditionInput
  updatedAt: ModelStringInput
}

input CreateTicketInput {
  status: String!
  createdAt: AWSDateTime
  tournamentId: ID!
  userId: ID!
  id: ID
}

input UpdateTicketInput {
  status: String
  createdAt: AWSDateTime
  tournamentId: ID
  userId: ID
  id: ID!
}

input DeleteTicketInput {
  id: ID!
}

input ModelSubscriptionTicketFilterInput {
  status: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  tournamentId: ModelSubscriptionIDInput
  userId: ModelSubscriptionIDInput
  id: ModelSubscriptionIDInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionTicketFilterInput]
  or: [ModelSubscriptionTicketFilterInput]
}

type ModelQrcodeConnection @aws_api_key @aws_iam {
  items: [Qrcode]!
  nextToken: String
}

input ModelQrcodeFilterInput {
  ticketId: ModelIDInput
  url: ModelStringInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelQrcodeFilterInput]
  or: [ModelQrcodeFilterInput]
  not: ModelQrcodeFilterInput
}

input ModelQrcodeConditionInput {
  ticketId: ModelIDInput
  url: ModelStringInput
  and: [ModelQrcodeConditionInput]
  or: [ModelQrcodeConditionInput]
  not: ModelQrcodeConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateQrcodeInput {
  ticketId: ID!
  url: String!
  id: ID
}

input UpdateQrcodeInput {
  ticketId: ID
  url: String
  id: ID!
}

input DeleteQrcodeInput {
  id: ID!
}

input ModelSubscriptionQrcodeFilterInput {
  ticketId: ModelSubscriptionIDInput
  url: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionQrcodeFilterInput]
  or: [ModelSubscriptionQrcodeFilterInput]
}

type ModelUserConnection @aws_iam @aws_cognito_user_pools @aws_api_key {
  items: [User]!
  nextToken: String
}

input ModelUserFilterInput {
  name: ModelStringInput
  profileOwner: ModelStringInput
  email: ModelStringInput
  tierId: ModelIDInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input ModelUserConditionInput {
  name: ModelStringInput
  profileOwner: ModelStringInput
  email: ModelStringInput
  tierId: ModelIDInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateUserInput {
  name: String!
  profileOwner: String
  email: String!
  tierId: ID
  id: ID
}

input UpdateUserInput {
  name: String
  profileOwner: String
  email: String
  tierId: ID
  id: ID!
}

input DeleteUserInput {
  id: ID!
}

input ModelSubscriptionUserFilterInput {
  name: ModelSubscriptionStringInput
  email: ModelSubscriptionStringInput
  tierId: ModelSubscriptionIDInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserFilterInput]
  or: [ModelSubscriptionUserFilterInput]
  profileOwner: ModelStringInput
}

type ModelTierConnection @aws_api_key @aws_iam {
  items: [Tier]!
  nextToken: String
}

input ModelTierFilterInput {
  alias: ModelStringInput
  value: ModelFloatInput
  description: ModelStringInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelTierFilterInput]
  or: [ModelTierFilterInput]
  not: ModelTierFilterInput
}

input ModelTierConditionInput {
  alias: ModelStringInput
  value: ModelFloatInput
  description: ModelStringInput
  and: [ModelTierConditionInput]
  or: [ModelTierConditionInput]
  not: ModelTierConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateTierInput {
  alias: String!
  value: Float!
  description: String!
  id: ID
}

input UpdateTierInput {
  alias: String
  value: Float
  description: String
  id: ID!
}

input DeleteTierInput {
  id: ID!
}

input ModelSubscriptionTierFilterInput {
  alias: ModelSubscriptionStringInput
  value: ModelSubscriptionFloatInput
  description: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionTierFilterInput]
  or: [ModelSubscriptionTierFilterInput]
}
